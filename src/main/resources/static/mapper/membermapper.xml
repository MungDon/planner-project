<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.planner.mapper.MemberMapper">
	
	<!-- 소셜로그인 회원생성 -->
	<insert id="createMember" parameterType="ReqOAuth2MemberAdd">
		INSERT INTO member(
			member_id,
			member_birth,
			member_phone,
			member_gender,
			member_email,
			member_password,
			member_name,
			oauth_id,
			member_status,
			oauth_type,
			member_role,
			member_reg
		)	VALUES	(
			nextval('member_seq'),
			'2020-02-01',
			'none',
			'none',
			#{member_email},
			#{member_password},
			#{member_name},
			#{oauth_id},
			#{member_status},
			#{oauth_type},
			#{member_role},
			now()
		)
	</insert>
		<!--member_seq.NEXTVAL , sysdate -->
	<!-- 회원가입 -->
	<insert id="memberInsert" parameterType="MemberDTO">
			INSERT INTO member(
				member_id,
				member_password,
				member_name,
				member_birth,
				member_email,
				member_phone,
				member_gender,
				member_reg,
				member_status,
				member_role,
				oauth_id
				) values (
				nextval('member_seq'),
				#{member_password},
				#{member_name},
				#{member_birth},
				#{member_email},
				#{member_phone},
				#{member_gender},
				now(),
				'B',
				#{member_role},
				'none'
			)
	</insert>
	<!--member_seq.NEXTVAL , sysdate -->
	
	<!-- 소셜로그인 추가 회원정보 -->
	<update id="fetchAdditionalUserInfo" parameterType="ReqOAuth2Signup">
		UPDATE member
		SET	
			member_birth = #{member_birth},
			member_phone = #{member_phone},
			member_gender = #{member_gender},
			member_status = #{member_status}
		<if test="member_email != null">
            , member_email = #{member_email}
        </if>
		WHERE
			oauth_id = #{oauth_id}
	</update>
	
	<!-- 회원 수정 -->
	<update id="memberUpdate" parameterType="ReqMemberUpdate">
		UPDATE member
		SET
			member_name = #{member_name},
			member_birth = #{member_birth},
			member_phone = #{member_phone}
		WHERE
			member_id = #{member_id}
	</update>
	
	<!-- 회원 상태변경 -->
	<update id="changeMemberStatus">
		UPDATE member
		SET
			member_status = #{member_status}
		WHERE
			member_id = #{member_id}
	</update>
	
	<!-- OAtuhID 고유번호로 회원찾기 -->
	<select id="findByOAuthID" resultType="ResMemberDetail">
		SELECT *
		FROM member
		WHERE oauth_id = #{oauthId}
	</select>
	
		<!-- 회원 이메일로 객체 가져오기 -->
	<select id="findByUser" resultType="MemberDTO">
		select *
		from member
		where member_email = #{member_email}
	</select>
	
	<!-- 내 정보 -->
	<select id="findByEmail">
		SELECT * 
		FROM member
		WHERE
			member_email = #{member_email}
	</select>
	
	<!-- 회원이메일, 소셜로그인 타입으로 유저 정보 가져오기 -->
	<select id="findByEmailAndOAuthType" >
		SELECT *
		FROM member
		WHERE
			member_email = #{member_email},
			oauth_tpye = #{oauth_tpye}
	</select>
	
</mapper>